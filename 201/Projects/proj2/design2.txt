# File:    design2.txt
# Author:  Eric Gronda
# Date:    10/30/17
# Section: 06
# E-mail:  gt32930@umbc.edu
# Description:
#    Design file for Project 2: Game of Life

# CONSTANTS

ROW_MIN = 1
COL_MIN = 1

QUIT = "q"

NO_MAX = ""

ITERATE_MIN = 0

DEAD = "."
ALIVE = "A"

###############################################################################
# getValidInput() makes sure the user enters a valid number based on the
#                 minimum and maximum values
# Input:          userNum; user entered number
#                 minn; minimum value that userNum can be
#                 maxx; maximum value that userNum can be
#                 prompt; a message displayed to clarify bounds
# Output:         validNum; a validated number

###############################################################################
# make2DList() uses for loops to create a 2D list
# Input:       rowNum; length of the first layer of the 2D list
#              colNum; length of the second layer of the 2D list
# Output:      list2D; 2D list with lengths of rowNum and colNum

###############################################################################
# makeBoard() makes the starting board for the game
# Input:      list2D; 2D list that gives rows and columns
#             row; row of cell to make alive
#             col; column of cell to make alive
# Output:     board; 2D list of starting game board

###############################################################################
# printBoard() prints the current game board
# Input:       board; 2D list of current game board
# Output:      None

###############################################################################
# checkNeighbors() checks the neighbors of a cell to see if they should live
#                  or die in the next iteration
# Input:           board; 2D list for current game board
#                  cell; cell chosen to view neighbors
# Output:          alive; boolean value to tell whether or not the cell should
#                  live to the next iteration

###############################################################################
# nextIteration() changes the game board based on the alive criteria
# Input:          board; 2D list for current game board
# Output:         newBoard; 2D list for the next iteration

#------------------------------------------------------------------------------
# Alive Criteria:
#     - any live cell with fewer than 2 live neighbors dies
#     - any live cell with 2 or 3 live neighbors lives
#     - any live cell with more than 3 neighbors dies
#     - any dead cell with exactly 3 live neighbors becomes alive
#------------------------------------------------------------------------------ 

def main():
    # get the number of rows (rowNum) for the board
    getValidInput()
    # get the number of columns (colNum) for the board
    getValidInput()
    # make a list out of the rows columns ( list2D[row][column] )
    make2DList()

    # get the row (aliveRow) of a cell to make alive (maxx = rowNum - 1)
    getValidInput()
    # get the column (aliveCol) of a cell to make alive (maxx = colNum - 1)
    getValidInput()
    # set up starting board
    makeBoard()
    # display starting board
    printBoard()

    # get number of iterations (iterNum)
    getValidInput()
    # while current iteration is less than iterNum
	# iterate over the boards
        nextIteration()
	# display current board
	printBoard()

main()
